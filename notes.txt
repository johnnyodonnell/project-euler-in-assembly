
WinDbg Notes:
    * How to find the entrypoint
        - https://stackoverflow.com/a/13405125/5832619

Tutorials read:
    - https://www.youtube.com/watch?v=wLXIWKUWpSs
    - https://www.cs.virginia.edu/~evans/cs216/guides/x86.html
    - https://web.stanford.edu/class/cs107/guide/x86-64.html
        * Contains a list of the registers conventionally owned by
            the caller and registers conventionally owned by the callee
        * Explains the use instructions such as `mov %ebx, %ebx`
    - https://www.intel.com/content/dam/develop/external/us/en/documents/introduction-to-x64-assembly-181178.pdf
        * "assembly code knowledge is indispensable when diagnosing malware"
        * An extended precision data type is supported, which is an
            80-bit version of float (32 bits) and double (64 bits)
        * Intel provides a "loop" instruction, which could be pretty
            convenient
        * By convention, "Larger return values (structs) have space
            allocated on the stack by the caller"
        * "Registers RAX, RCX, RDX, R8, R9, R10, and R11 are considered
            volatile and must be considered destroyed on function calls."
        * "RBX, RBP, RDI, RSI, R12, R14, R14, and R15 must be saved in
            any function using them"
                - Must be saved and restored
    - https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf
        * Not a great tutorial, since there are some typos in the doc
        * Mentions that the base pointer has mostly been eliminated
            in 64-bit architecture
        * By convention, function arguments are pushed onto the stack
            in right-to-left order

Tutorials that I might read:
    - https://cs.lmu.edu/~ray/notes/nasmtutorial/
        * "The stack pointer rsp must be aligned to a 16-byte boundary
            before making a call."
        * Started reading, but did not finish
    - https://github.com/mschwartz/assembly-tutorial

Notes:
    * How to do modulo in assembly
        - https://stackoverflow.com/a/8022107/5832619
    * Compiling x64 assembly with libc
        - https://montcs.bloomu.edu/~bobmon/Code/Asm.and.C/Asm.Nasm/hello-printf-64.asm.html
    * gdb is great, but edb is much more convenient since it has a GUI;
        thus, I have switched to primarily debugging with edb

